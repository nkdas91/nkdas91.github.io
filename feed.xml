<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Neeraj Das</title><link>https://neerajdas.com/</link><description>Recent content on Neeraj Das</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 03 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://neerajdas.com/feed.xml" rel="self" type="application/rss+xml"/><item><title>Locked out of SSH after enabling UFW on Ubuntu EC2 instance?</title><link>https://neerajdas.com/blog/locked-out-of-ssh-after-enabling-ufw/</link><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid>https://neerajdas.com/blog/locked-out-of-ssh-after-enabling-ufw/</guid><description>&lt;p>Locked out of SSH after enabling UFW on Ubuntu EC2 instance?&lt;/p>
&lt;p>The solution is to stop the instance and instruct it to disable the firewall program upon restart.&lt;/p>
&lt;p>WARNING: Before starting this procedure, review the following:&lt;/p>
&lt;ul>
&lt;li>Stopping and starting the instance erases any data on &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/instance-store-vs-ebs/">instance store volumes&lt;/a>. Be sure that you &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/back-up-instance-store-ebs/">back up any data on the instance store volume&lt;/a> that you want to keep. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#display-ami-root-device-type">Determine the root device type of your AMI&lt;/a>.&lt;/li>
&lt;li>Stopping and restarting the instance changes the public IP address of your instance. It&amp;rsquo;s a best practice to use an &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address&lt;/a> instead of a public IP address when routing external traffic to your instance.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>Stop your instance. (Do not terminate)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the console, select your instance and go to Actions -&amp;gt; Instance Settings -&amp;gt; Edit user data&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select Modify user data as text and paste the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">Content-Type: multipart/mixed; boundary=&amp;#34;//&amp;#34;
MIME-Version: 1.0
--//
Content-Type: text/cloud-config; charset=&amp;#34;us-ascii&amp;#34;
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=&amp;#34;cloud-config.txt&amp;#34;
#cloud-config
cloud_final_modules:
- [scripts-user, always]
--//
Content-Type: text/x-shellscript; charset=&amp;#34;us-ascii&amp;#34;
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=&amp;#34;userdata.txt&amp;#34;
#!/bin/bash
ufw disable
iptables -L
iptables -F
--//
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Save and Restart the instance and SSH should work. The user data disables UFW and flushes any iptable rules blocking SSH access.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After successfully connecting via SSH, you may reset the user data by following previous steps.
Select Modify user data as text, delete all text and save.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>When a user data script is processed, it is copied to and run from &lt;code>/var/lib/cloud/instances/instance-id/&lt;/code>.
The script is not deleted after it is run. Be sure to delete the user data scripts from
&lt;code>/var/lib/cloud/instances/instance-id/&lt;/code> before you create an AMI from the instance.
Otherwise, the script will exist in this directory on any instance launched from the AMI.&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/execute-user-data-ec2/">https://aws.amazon.com/premiumsupport/knowledge-center/execute-user-data-ec2/&lt;/a>&lt;/p></description></item><item><title>Adding PHPUnit code coverage to SonarQube</title><link>https://neerajdas.com/blog/adding-phpunit-code-coverage-to-sonarqube/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://neerajdas.com/blog/adding-phpunit-code-coverage-to-sonarqube/</guid><description>&lt;p>Code coverage is a measure used to describe the degree to which the source code of a
program is tested by a particular test suite. A program with high code coverage has
been more thoroughly tested and has a lower chance of containing software bugs than
a program with low code coverage.&lt;/p>
&lt;p>We need Xdebug installed in our system to generate a code coverage report.
Run the following commands (Linux) or check &lt;a href="https://xdebug.org/">Xdebug&lt;/a> installation instruction if the commands donâ€™t work.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">sudo apt-get install php-xdebug
sudo service apache2 restart
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;h2 id="generating-code-coverage">Generating code coverage&lt;/h2>
&lt;p>To generate code coverage, update &lt;code>phpunit.xml&lt;/code> as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;phpunit&lt;/span> &lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;span class="na">xsi:noNamespaceSchemaLocation=&lt;/span>&lt;span class="s">&amp;#34;https://schema.phpunit.de/9.3/phpunit.xsd&amp;#34;&lt;/span>
&lt;span class="na">bootstrap=&lt;/span>&lt;span class="s">&amp;#34;vendor/autoload.php&amp;#34;&lt;/span>
&lt;span class="na">cacheResultFile=&lt;/span>&lt;span class="s">&amp;#34;.phpunit.cache/test-results&amp;#34;&lt;/span>
&lt;span class="na">executionOrder=&lt;/span>&lt;span class="s">&amp;#34;depends,defects&amp;#34;&lt;/span>
&lt;span class="na">beStrictAboutOutputDuringTests=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">beStrictAboutTodoAnnotatedTests=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">failOnRisky=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">failOnWarning=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">verbose=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;php&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;server&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;DOCUMENT_ROOT&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;ABSOLUTE_PATH_TO_DOCUMENT_ROOT&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/php&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;coverage&lt;/span> &lt;span class="na">cacheDirectory=&lt;/span>&lt;span class="s">&amp;#34;.phpunit.cache/code-coverage&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;include&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;directory&lt;/span> &lt;span class="na">suffix=&lt;/span>&lt;span class="s">&amp;#34;.php&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>src&lt;span class="nt">&amp;lt;/directory&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/include&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;report&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;clover&lt;/span> &lt;span class="na">outputFile=&lt;/span>&lt;span class="s">&amp;#34;report/tests-clover.xml&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;html&lt;/span> &lt;span class="na">outputDirectory=&lt;/span>&lt;span class="s">&amp;#34;report&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/report&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/coverage&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;testsuites&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;testsuite&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;directory&lt;/span> &lt;span class="na">suffix=&lt;/span>&lt;span class="s">&amp;#34;Test.php&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>tests&lt;span class="nt">&amp;lt;/directory&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/testsuite&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/testsuites&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;logging&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;junit&lt;/span> &lt;span class="na">outputFile=&lt;/span>&lt;span class="s">&amp;#34;report/tests-junit.xml&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;testdoxHtml&lt;/span> &lt;span class="na">outputFile=&lt;/span>&lt;span class="s">&amp;#34;report/testdox.html&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/logging&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/phpunit&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And run tests:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">./vendor/bin/phpunit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you get a warning: &lt;code>XDEBUG_MODE=coverage or xdebug.mode=coverage has to be set&lt;/code>,
Run the tests as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">XDEBUG_MODE=coverage ./vendor/bin/phpunit
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;h2 id="viewing-coverage-in-a-browser">Viewing coverage in a browser&lt;/h2>
&lt;p>Output directory is set as &lt;code>report&lt;/code>. So, open &lt;code>report/index.html&lt;/code> on a browser to see
the code coverage.&lt;br>
&lt;br/>&lt;/p>
&lt;h2 id="adding-code-coverage-to-sonarqube">Adding Code Coverage to SonarQube&lt;/h2>
&lt;p>SonarQube uses &lt;code>coverage.report.clover&lt;/code> and &lt;code>logging.junit&lt;/code> to show code coverage.&lt;br>
&lt;code>coverage.report.html&lt;/code> generates a code coverage report in HTML.&lt;br>
&lt;code>logging.testdoxHtml&lt;/code> generates an HTML report containing a list of Test Cases written.&lt;br>
&lt;code>outputFile&lt;/code> sets report path.&lt;/p>
&lt;p>Add report paths to sonar properties file&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">sonar.tests=tests
sonar.php.tests.reportPath=report/tests-junit.xml
sonar.php.coverage.reportPath=report/tests-clover.xml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>sonar.tests&lt;/code> = path to the test directory of your project&lt;br>
&lt;code>sonar.php.tests.reportPath&lt;/code> = path to junit report&lt;br>
&lt;code>sonar.php.coverage.reportPath&lt;/code> = path to clover report&lt;/p>
&lt;p>Exclude files that are not unit tested&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">sonar.test.exclusions=tests/app/**
sonar.coverage.exclusions=tests/app/**
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>sonar.test.exclusions&lt;/code> = files excluded from unit tests&lt;br>
&lt;code>sonar.coverage.exclusions&lt;/code> = files excluded from code coverage&lt;/p>
&lt;p>Run Sonar scanner&lt;/p></description></item><item><title>Getting started with PHPUnit</title><link>https://neerajdas.com/blog/getting-started-with-phpunit/</link><pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate><guid>https://neerajdas.com/blog/getting-started-with-phpunit/</guid><description>&lt;p>A unit test provides a strict, written contract that a piece of code must satisfy.
As a result, unit tests find problems early in the development cycle.&lt;/p>
&lt;p>The goal is to isolate each part of the program and verify that it is correct.&lt;/p>
&lt;p>&lt;a href="https://phpunit.de/">PHPUnit&lt;/a> is a well-known testing framework for PHP. It uses assertions to verify that a specific
component or unit behaves as expected.&lt;/p>
&lt;p>The purpose of this tutorial is to introduce you to the basics of PHPUnit.&lt;br>
&lt;br/>&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Before we start writing our first unit test, we need to have PHPUnit installed. The installation
process is documented at &lt;a href="https://phpunit.de/">https://phpunit.de/&lt;/a>.&lt;br>
&lt;br/>&lt;/p>
&lt;h2 id="writing-our-first-test">Writing our first test&lt;/h2>
&lt;div class="p-3 my-3 author-note theme-text-primary">
Before we begin,&lt;br>
Please Clone / Download the example code from &lt;a target="_blank" href="https://github.com/nkdas91/Getting-started-with-PHPUnit">GitHub&lt;/a>.&lt;br>
Copy &lt;b>env.example.php&lt;/b> to &lt;b>env.php&lt;/b> and replace default values.&lt;br>
Create a DB &lt;b>phpunit&lt;/b> and import &lt;b>sql/phpunit.sql&lt;/b>.&lt;br>
Update &lt;b>ABSOLUTE PATH TO DOCUMENT ROOT&lt;/b> in &lt;b>phpunit.xml&lt;/b>.&lt;br>
Run &lt;b>composer install&lt;/b> in the root directory.
&lt;/div>
&lt;p>To get started, we need something to test, so for the first example, Iâ€™ve written a simple
PHP class &lt;code>Average&lt;/code> that calculates the average of an array of integers.&lt;/p>
&lt;p>src/Average.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span> &lt;span class="k">declare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strict_types&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Average&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">ensureIsValidArrayOfIntegers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">array&lt;/span> &lt;span class="nv">$numbers&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">foreach&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$numbers&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nv">$number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">filter_var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">FILTER_VALIDATE_INT&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">InvalidArgumentException&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nx">sprintf&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#34;%s&amp;#34; is not a valid number&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nv">$number&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">getAverage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">array&lt;/span> &lt;span class="nv">$numbers&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">float&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">ensureIsValidArrayOfIntegers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$numbers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">array_sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$numbers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$numbers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Basic coventions for writing tests with PHPUnit:&lt;/p>
&lt;ol>
&lt;li>The tests for a class &lt;code>Class&lt;/code> go into a class &lt;code>ClassTest&lt;/code>.&lt;/li>
&lt;li>&lt;code>ClassTest&lt;/code> inherits (most of the time) from &lt;code>PHPUnit\Framework\TestCase&lt;/code>.&lt;/li>
&lt;li>The tests are public methods that are named &lt;code>test*&lt;/code>.&lt;/li>
&lt;li>Alternatively, we can use the &lt;code>@test&lt;/code> annotation in a methodâ€™s docblock to mark it as a test method.&lt;/li>
&lt;li>Inside the test methods, assertion methods are used to assert that an actual value matches an expected value.&lt;/li>
&lt;/ol>
&lt;p>To ensure that our class &lt;code>Average&lt;/code> works, we need to create a test class &lt;code>AverageTest&lt;/code> that extends &lt;code>PHPUnit\Framework\TestCase&lt;/code>.&lt;/p>
&lt;p>tests/AverageTest.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span> &lt;span class="k">declare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strict_types&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">use&lt;/span> &lt;span class="nx">PHPUnit\Framework\TestCase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">final&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">AverageTest&lt;/span> &lt;span class="k">extends&lt;/span> &lt;span class="nx">TestCase&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Test for an Exception if invalid argument type is passed.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testExceptionFromInvalidArgumentType&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">expectException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">TypeError&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$average&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Average&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nv">$verage&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Test for an Exception if invalid argument is passed.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testExceptionFromInvalidArgument&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">expectException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">InvalidArgumentException&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$average&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Average&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nv">$average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Test for an Exception if an empty array is passed.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testExceptionFromEmptyArrayArgument&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">expectException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">DivisionByZeroError&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$average&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Average&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nv">$average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testGetAverage&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$average&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Average&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;h2 id="running-our-tests">Running our tests&lt;/h2>
&lt;p>Running our tests is as simple as calling the phpunit executable and pointing it at our tests.
Hereâ€™s an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">./vendor/bin/phpunit tests
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">PHPUnit 9.5.0 by Sebastian Bergmann and contributors.
.... 4 / 4 (100%)
Time: 00:00.008, Memory: 4.00 MB
OK (4 tests, 4 assertions)
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;h2 id="fixtures-setup--teardown">Fixtures (Setup &amp;amp; Teardown)&lt;/h2>
&lt;p>The purpose of a fixture is to ensure that there is a well known and fixed environment
in which tests are run. This allows for tests to be repeatable, which is one of the key
features of an effective test framework.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;ul>
&lt;li>Loading a database with a specific known set of data.&lt;/li>
&lt;li>Preparation of input data as well as set-up and creation of mock objects.&lt;/li>
&lt;li>Copying a specific known set of files&lt;/li>
&lt;/ul>
&lt;p>PHPUnit supports sharing the setup code. Before a test method is run, a template
method called &lt;code>setUp()&lt;/code> is invoked. &lt;code>setUp()&lt;/code> is where we create the objects against
which we will test. Once the test method has finished running, whether it succeeded
or failed, another template method called &lt;code>tearDown()&lt;/code> is invoked. &lt;code>tearDown()&lt;/code> is where
we clean up the objects against which we tested.&lt;/p>
&lt;p>In &lt;code>AverageTest.php&lt;/code>, it is tedious to instantiate &lt;code>Average&lt;/code> class in each test case.
So, we move it to &lt;code>setUp()&lt;/code> and &lt;code>tearDown()&lt;/code>.&lt;/p>
&lt;div class="p-3 my-3 author-note theme-text-primary">Also check tests/UserTest.php for another example.&lt;/div>
&lt;p>tests/AverageTest.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span> &lt;span class="k">declare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strict_types&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">use&lt;/span> &lt;span class="nx">PHPUnit\Framework\TestCase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">final&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">AverageTest&lt;/span> &lt;span class="k">extends&lt;/span> &lt;span class="nx">TestCase&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">protected&lt;/span> &lt;span class="nv">$average&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * This function is invoked before each test function.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">protected&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">setUp&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">average&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Average&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * This function is invoked after each test function.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">protected&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">tearDown&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">unset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">average&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Test for an Exception if invalid argument type is passed.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testExceptionFromInvalidArgumentType&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">expectException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">TypeError&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Test for an Exception if invalid argument is passed.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testExceptionFromInvalidArgument&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">expectException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">InvalidArgumentException&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Test for an Exception if an empty array is passed.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testExceptionFromEmptyArrayArgument&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">expectException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">DivisionByZeroError&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testGetAverage&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;h2 id="data-providers">Data Providers&lt;/h2>
&lt;p>A test method can accept arbitrary arguments. These arguments are to be provided by one or
more data provider methods. The data provider method to be used is specified using the
&lt;code>@dataProvider&lt;/code> annotation.&lt;/p>
&lt;p>tests/AverageTest.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * @dataProvider averageProvider
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testGetAverageUsingDataProvider&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">int&lt;/span> &lt;span class="nv">$a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">int&lt;/span> &lt;span class="nv">$b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">float&lt;/span> &lt;span class="nv">$expected&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">assertSame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$expected&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nv">$a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$b&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">averageProvider&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">array&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;h2 id="test-doubles">Test Doubles&lt;/h2>
&lt;p>When we are writing a test in which we cannot (or chose not to) use a real depended-on
component (DOC), we can replace it with a Test Double. The Test Double doesnâ€™t have to
behave exactly like the real DOC; it merely has to provide the same API as the real one
so that the system under test (SUT) thinks it is the real one!&lt;/p>
&lt;p>The &lt;code>createStub&lt;/code> and &lt;code>createMock&lt;/code> methods can be used in a test to
automatically generate an object that can act as a test double.&lt;/p>
&lt;p>By default, all methods of the original class are replaced with a dummy implementation
that returns null (without calling the original method). We can configure these dummy
implementations to return a value when called Using the &lt;code>will($this-&amp;gt;returnValue())&lt;/code>
or simply &lt;code>willReturn&lt;/code> method.&lt;/p>
&lt;p>When the defaults used by the &lt;code>createStub&lt;/code> and &lt;code>createMock&lt;/code> methods do not match
our needs then we can use the &lt;code>getMockBuilder&lt;/code> method to customize the test double
generation.&lt;/p>
&lt;p>Please note that &lt;code>final&lt;/code>, &lt;code>private&lt;/code>, and &lt;code>static&lt;/code> methods cannot be stubbed or mocked.&lt;/p>
&lt;h3 id="stubs">Stubs&lt;/h3>
&lt;p>The practice of replacing an object with a test double that (optionally) returns configured
return values is referred to as stubbing. You can use a stub to replace a real component
on which the SUT depends so that the test has a control point for the indirect inputs of the SUT.&lt;/p>
&lt;p>Let&amp;rsquo;s stub &lt;code>ensureIsValidArrayOfIntegers&lt;/code> method and skip validation.&lt;/p>
&lt;p>tests/AverageTest.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testStub&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * createStub stubs all the methods in the stubbed class.
&lt;/span>&lt;span class="sd"> * Here, ensureIsValidArrayOfIntegers and getAverage methods
&lt;/span>&lt;span class="sd"> * won&amp;#39;t be invoked from the Original Average class.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="nv">$stub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">createStub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Average&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Since we didn&amp;#39;t specify the return values,
&lt;/span>&lt;span class="sd"> * default values will be returned based on the functions return type.
&lt;/span>&lt;span class="sd"> *
&lt;/span>&lt;span class="sd"> * Return type of ensureIsValidArrayOfIntegers is void. So, nothing is returned.
&lt;/span>&lt;span class="sd"> * Return type of getAverage is float. So, 0.0 is returned
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">assertEmpty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$stub&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">ensureIsValidArrayOfIntegers&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$stub&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>tests/AverageTest.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testStubUsingMockBuilder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Here we used getMockBuilder to stub just one method: ensureIsValidArrayOfIntegers.
&lt;/span>&lt;span class="sd"> * This method won&amp;#39;t be invoked.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="nv">$stub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getMockBuilder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Average&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">setMethods&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;ensureIsValidArrayOfIntegers&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getMock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">assertEmpty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$stub&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">ensureIsValidArrayOfIntegers&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Since, ensureIsValidArrayOfIntegers method is stubbed,
&lt;/span>&lt;span class="sd"> * we are able to get an average even if we don&amp;#39;t pass a valid array of Integers.
&lt;/span>&lt;span class="sd"> *
&lt;/span>&lt;span class="sd"> * getAverage method of the original Average class is invoked.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">assertEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$stub&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">getAverage&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;br>
&lt;h3 id="mock-objects">Mock Objects&lt;/h3>
&lt;p>The practice of replacing an object with a test double that verifies expectations, for instance
asserting that a method has been called, is referred to as mocking.&lt;/p>
&lt;p>Let&amp;rsquo;s create a class &lt;code>Logger&lt;/code> that logs a string.&lt;/p>
&lt;p>src/Logger.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span> &lt;span class="k">declare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strict_types&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Logger&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$text&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">echo&lt;/span> &lt;span class="nv">$text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will add a method to the &lt;code>Average&lt;/code> class that uses Logger&amp;rsquo;s log method to log average.&lt;/p>
&lt;p>src/Average.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">logAverage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">array&lt;/span> &lt;span class="nv">$numbers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Logger&lt;/span> &lt;span class="nv">$logger&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">ensureIsValidArrayOfIntegers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$numbers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$logger&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">array_sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$numbers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$numbers&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s Mock &lt;code>Logger&lt;/code> and test if &lt;code>log&lt;/code> method is called.&lt;/p>
&lt;p>tests/AverageTest.php&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">testMock&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">void&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * Here, we are mocking log method of Logger class,
&lt;/span>&lt;span class="sd"> * just to ensure that it is called with the specified arguments.
&lt;/span>&lt;span class="sd"> * The Average class does not need to verify what happens within the Logger log method.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="nv">$mockObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">createMock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Logger&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$mockObject&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">expects&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">once&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;log&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nv">$this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">average&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">logAverage&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nv">$mockObject&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;h2 id="xml-configuration">XML Configuration&lt;/h2>
&lt;p>&lt;code>phpunit.xml&lt;/code> file can be used to compose a test suite and specify other configurations.
The following is an xml configuration that will add all &lt;code>*Test&lt;/code> classes that are
found in &lt;code>*Test.php&lt;/code> files when the &lt;code>tests&lt;/code> directory is recursively traversed.&lt;/p>
&lt;p>phpunit.xml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;phpunit&lt;/span> &lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;span class="na">xsi:noNamespaceSchemaLocation=&lt;/span>&lt;span class="s">&amp;#34;https://schema.phpunit.de/9.3/phpunit.xsd&amp;#34;&lt;/span>
&lt;span class="na">bootstrap=&lt;/span>&lt;span class="s">&amp;#34;vendor/autoload.php&amp;#34;&lt;/span>
&lt;span class="na">cacheResultFile=&lt;/span>&lt;span class="s">&amp;#34;.phpunit.cache/test-results&amp;#34;&lt;/span>
&lt;span class="na">executionOrder=&lt;/span>&lt;span class="s">&amp;#34;depends,defects&amp;#34;&lt;/span>
&lt;span class="na">beStrictAboutOutputDuringTests=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">beStrictAboutTodoAnnotatedTests=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">failOnRisky=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">failOnWarning=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">verbose=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;php&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;server&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;DOCUMENT_ROOT&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;ABSOLUTE_PATH_TO_DOCUMENT_ROOT&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/php&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;testsuites&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;testsuite&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;directory&lt;/span> &lt;span class="na">suffix=&lt;/span>&lt;span class="s">&amp;#34;Test.php&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>tests&lt;span class="nt">&amp;lt;/directory&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/testsuite&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/testsuites&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/phpunit&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>running our tests&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">./vendor/bin/phpunit
&lt;/code>&lt;/pre>&lt;/div>&lt;br/>
&lt;h2 id="code-coverage">Code Coverage&lt;/h2>
&lt;p>Code coverage is a measure used to describe the degree to which the source code of a
program is tested by a particular test suite. A program with high code coverage has
been more thoroughly tested and has a lower chance of containing software bugs than
a program with low code coverage.&lt;/p>
&lt;p>To generate code coverage, update &lt;code>phpunit.xml&lt;/code> as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;phpunit&lt;/span> &lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;span class="na">xsi:noNamespaceSchemaLocation=&lt;/span>&lt;span class="s">&amp;#34;https://schema.phpunit.de/9.3/phpunit.xsd&amp;#34;&lt;/span>
&lt;span class="na">bootstrap=&lt;/span>&lt;span class="s">&amp;#34;vendor/autoload.php&amp;#34;&lt;/span>
&lt;span class="na">cacheResultFile=&lt;/span>&lt;span class="s">&amp;#34;.phpunit.cache/test-results&amp;#34;&lt;/span>
&lt;span class="na">executionOrder=&lt;/span>&lt;span class="s">&amp;#34;depends,defects&amp;#34;&lt;/span>
&lt;span class="na">beStrictAboutOutputDuringTests=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">beStrictAboutTodoAnnotatedTests=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">failOnRisky=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">failOnWarning=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="na">verbose=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;php&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;server&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;DOCUMENT_ROOT&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;ABSOLUTE_PATH_TO_DOCUMENT_ROOT&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/php&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;coverage&lt;/span> &lt;span class="na">cacheDirectory=&lt;/span>&lt;span class="s">&amp;#34;.phpunit.cache/code-coverage&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;include&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;directory&lt;/span> &lt;span class="na">suffix=&lt;/span>&lt;span class="s">&amp;#34;.php&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>src&lt;span class="nt">&amp;lt;/directory&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/include&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;report&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;clover&lt;/span> &lt;span class="na">outputFile=&lt;/span>&lt;span class="s">&amp;#34;report/tests-clover.xml&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;html&lt;/span> &lt;span class="na">outputDirectory=&lt;/span>&lt;span class="s">&amp;#34;report&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/report&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/coverage&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;testsuites&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;testsuite&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;default&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;directory&lt;/span> &lt;span class="na">suffix=&lt;/span>&lt;span class="s">&amp;#34;Test.php&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>tests&lt;span class="nt">&amp;lt;/directory&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/testsuite&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/testsuites&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;logging&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;junit&lt;/span> &lt;span class="na">outputFile=&lt;/span>&lt;span class="s">&amp;#34;report/tests-junit.xml&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;testdoxHtml&lt;/span> &lt;span class="na">outputFile=&lt;/span>&lt;span class="s">&amp;#34;report/testdox.html&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/logging&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/phpunit&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And run tests:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">./vendor/bin/phpunit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you get a warning: &lt;code>XDEBUG_MODE=coverage or xdebug.mode=coverage has to be set&lt;/code>,
Run the tests as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">XDEBUG_MODE=coverage ./vendor/bin/phpunit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output directory is set as &lt;code>report&lt;/code>. So, open &lt;code>report/index.html&lt;/code> on a browser to see
the code coverage.&lt;/p>
&lt;p>I hope this is a good introduction to the world of unit testing. Even though there are several
topics Iâ€™ve not touched on, Iâ€™ve tried to give you a good point where you can start writing
your tests.&lt;/p></description></item><item><title>Material Style - A UI Library</title><link>https://neerajdas.com/blog/material-style/</link><pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate><guid>https://neerajdas.com/blog/material-style/</guid><description>&lt;p>A year ago, I was involved in a project with the requirement to have Material Design styles and animations for the UI.
Like always, I looked for frameworks or libraries that met the design specification.&lt;/p>
&lt;p>The first library that I came across was &lt;a href="https://getmdl.io/">Material Design Lite&lt;/a>.&lt;br>
It is a super lightweight library that didnâ€™t rely on any JavaScript frameworks.
Unfortunately, it didnâ€™t have essential components such as Select Boxes.
Having found it inadequate, I moved on for the next.&lt;/p>
&lt;p>&lt;a href="https://mdbootstrap.com/">MD Bootstrap&lt;/a>&lt;br>
It was a popular library built on top of Bootstrap. I was curious to see if it could fulfil the requirement.
Once again, I was left disappointed because the styles and animations were not as per the Material Design Guidelines.
Moreover, we could not use all its components unless we purchased the PRO version of it.&lt;/p>
&lt;p>&lt;a href="https://materializecss.com/">Materialize&lt;/a>&lt;br>
Developed by a team of students from Carnegie Mellon University, it was a complete framework that didnâ€™t depend on
Bootstrap or jQuery. But, like MD Bootstrap, the animations were not as per the Material Design Guidelines.&lt;/p>
&lt;p>Thus, I still did not have any luck going my way with finding a suitable Material Design package.&lt;/p>
&lt;p>And then I decided to use Bootstrap as it is and write my CSS and JS on top of it to fulfil the projectâ€™s requirement.
It gave me an idea to create a UI wrapper which would have all the bootstrap components, look and behave as per the
Material Design Guidelines. I set about developing it and six months later, with some hard work,
research and sleepless nights, &lt;a href="https://materialstyle.github.io/">Material Style&lt;/a> was born.&lt;/p>
&lt;p>&lt;a href="https://materialstyle.github.io/">Material Style&lt;/a> is now an easy to use UI Library based on Bootstrap 4.5 that lets you add Material Design styles
and animations to Bootstrap components.&lt;/p>
&lt;div class="m-shape-container mt-2 mb-4">
&lt;a href="https://materialstyle.github.io/"
class="btn btn-ms btn-primary" role="button" style="width:250px;">
Visit Material Style
&lt;/a>
&lt;div class="angle-top-left">&lt;/div>
&lt;div class="angle-top-right">&lt;/div>
&lt;div class="angle-bottom-left">&lt;/div>
&lt;div class="angle-bottom-right">&lt;/div>
&lt;/div>
&lt;h2 id="few-components-from-material-style">Few Components from Material Style&lt;/h2>
&lt;div class="row p-4 material-style-showcase" id="example-dark">
&lt;style>
#example-dark .form-floating--outlined .btn-select {
color: white;
}
&lt;/style>
&lt;div class="col">
&lt;button type="button" class="btn btn-pink btn-lg m-1">
Button
&lt;span class="ripple-surface">&lt;/span>
&lt;/button>
&lt;button type="button" class="btn btn-pink btn-lg rounded-pill m-1">
&lt;i class="bi bi-search">&lt;/i> Search
&lt;span class="ripple-surface">&lt;/span>
&lt;/button>
&lt;button type="button" class="btn btn-fab btn-pink m-1">
&lt;i class="bi bi-heart-fill">&lt;/i>
&lt;span class="ripple-surface">&lt;/span>
&lt;/button>
&lt;span class="d-block">&lt;/span>
&lt;fieldset class="form-floating base-pink primary-purple m-3 bg-trans" style="max-width: 200px;">
&lt;input type="text" class="form-control" id="firstname"
placeholder="firstname" autocomplete="off">
&lt;label for="firstname">Firstname&lt;/label>
&lt;/fieldset>
&lt;fieldset class="form-floating form-floating--outlined base-pink primary-yellow m-3" style="max-width: 200px;">
&lt;input type="text" class="form-control text-white" id="firstname-outline"
placeholder="firstname" autocomplete="off">
&lt;label for="firstname-outline">Firstname&lt;/label>
&lt;/fieldset>
&lt;fieldset class="form-floating base-pink primary-purple m-3" style="max-width: 200px;">
&lt;select class="form-select">
&lt;option value="">&lt;/option>
&lt;option value="1">Option 1&lt;/option>
&lt;option value="2">Option 2&lt;/option>
&lt;option value="3">Option 3&lt;/option>
&lt;option value="4">Option 4&lt;/option>
&lt;/select>
&lt;label>Select One&lt;/label>
&lt;/fieldset>
&lt;fieldset class="form-floating form-floating--outlined base-pink primary-yellow m-3" style="max-width: 200px;">
&lt;select class="form-select text-white">
&lt;option value="">&lt;/option>
&lt;option value="1">Option 1&lt;/option>
&lt;option value="2">Option 2&lt;/option>
&lt;option value="3">Option 3&lt;/option>
&lt;option value="4">Option 4&lt;/option>
&lt;/select>
&lt;label>Select One&lt;/label>
&lt;/fieldset>
&lt;/div>
&lt;/div>
&lt;div class="row p-4 material-style-showcase" id="example-light">
&lt;div class="col">
&lt;button type="button" class="btn btn-purple btn-lg m-1">
Button
&lt;span class="ripple-surface">&lt;/span>
&lt;/button>
&lt;button type="button" class="btn btn-purple btn-lg rounded-pill m-1">
&lt;i class="bi bi-search">&lt;/i> Search
&lt;span class="ripple-surface">&lt;/span>
&lt;/button>
&lt;button type="button" class="btn btn-fab btn-purple m-1">
&lt;i class="bi bi-heart-fill">&lt;/i>
&lt;span class="ripple-surface">&lt;/span>
&lt;/button>
&lt;span class="d-block">&lt;/span>
&lt;fieldset class="form-floating base-purple primary-green m-3 bg-trans" style="max-width: 200px;">
&lt;input type="text" class="form-control" id="firstname"
placeholder="firstname" autocomplete="off">
&lt;label for="firstname">Firstname&lt;/label>
&lt;/fieldset>
&lt;fieldset class="form-floating form-floating--outlined base-purple primary-green m-3" style="max-width: 200px;">
&lt;input type="text" class="form-control text-white" id="firstname-outline"
placeholder="firstname" autocomplete="off">
&lt;label for="firstname-outline">Firstname&lt;/label>
&lt;/fieldset>
&lt;fieldset class="form-floating base-purple primary-green m-3" style="max-width: 200px;">
&lt;select class="form-select">
&lt;option value="">&lt;/option>
&lt;option value="1">Option 1&lt;/option>
&lt;option value="2">Option 2&lt;/option>
&lt;option value="3">Option 3&lt;/option>
&lt;option value="4">Option 4&lt;/option>
&lt;/select>
&lt;label>Select One&lt;/label>
&lt;/fieldset>
&lt;fieldset class="form-floating form-floating--outlined base-purple primary-green m-3" style="max-width: 200px;">
&lt;select class="form-select text-white">
&lt;option value="">&lt;/option>
&lt;option value="1">Option 1&lt;/option>
&lt;option value="2">Option 2&lt;/option>
&lt;option value="3">Option 3&lt;/option>
&lt;option value="4">Option 4&lt;/option>
&lt;/select>
&lt;label>Select One&lt;/label>
&lt;/fieldset>
&lt;/div>
&lt;/div></description></item></channel></rss>